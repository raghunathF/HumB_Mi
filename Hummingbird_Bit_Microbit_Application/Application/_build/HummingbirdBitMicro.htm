<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\HummingbirdBitMicro.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\HummingbirdBitMicro.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Apr 01 12:29:25 2019
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BLEInit &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SysTick_Handler</a><BR>
 <LI><a href="#[15]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">CCM_AAR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from nrf_drv_adc.o(i.ADC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">SPI1_TWI1_IRQHandler</a> from nrf_drv_twi.o(i.SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[12]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from nrf_drv_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from nrf_drv_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from nrf_drv_timer.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[2b]">ble_evt_dispatch</a> from hummingbirdbitblecallbacks.o(i.ble_evt_dispatch) referenced from hummingbirdbitbleinit.o(i.ble_stack_init)
 <LI><a href="#[30]">broadcast_timer_handler</a> from hummingbirdbitblecontrol.o(i.broadcast_timer_handler) referenced from hummingbirdbitblecontrol.o(i.init_broadcast_timer)
 <LI><a href="#[31]">broadcast_timer_uart_handler</a> from hummingbirdbituartcontrol.o(i.broadcast_timer_uart_handler) referenced from hummingbirdbituartcontrol.o(i.init_broadcast_uart_timer)
 <LI><a href="#[2e]">conn_params_error_handler</a> from hummingbirdbitblecallbacks.o(i.conn_params_error_handler) referenced from hummingbirdbitbleinit.o(i.conn_params_init)
 <LI><a href="#[0]">fs_evt_handler</a> from hummingbirdbitflash.o(i.fs_evt_handler) referenced 2 times from hummingbirdbitflash.o(fs_data)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[33]">micro_LED_flash_handler</a> from hummingbirdbitledarray.o(i.micro_LED_flash_handler) referenced from hummingbirdbitledarray.o(i.init_micro_LEDs)
 <LI><a href="#[32]">micro_LED_timer_handler</a> from hummingbirdbitledarray.o(i.micro_LED_timer_handler) referenced from hummingbirdbitledarray.o(i.init_micro_LEDs)
 <LI><a href="#[34]">micro_buzzer_timer_handler</a> from hummingbirdbitbuzzer.o(i.micro_buzzer_timer_handler) referenced from hummingbirdbitbuzzer.o(i.init_timer_buzzer)
 <LI><a href="#[36]">nus_data_handler</a> from hummingbirdbitblecallbacks.o(i.nus_data_handler) referenced from hummingbirdbitbleinit.o(i.services_init)
 <LI><a href="#[27]">on_adv_evt</a> from hummingbirdbitblecallbacks.o(i.on_adv_evt) referenced from hummingbirdbitbleinit.o(i.advertising_init)
 <LI><a href="#[2d]">on_conn_params_evt</a> from hummingbirdbitblecallbacks.o(i.on_conn_params_evt) referenced from hummingbirdbitbleinit.o(i.conn_params_init)
 <LI><a href="#[23]">pwm1_ready_callback</a> from hummingbirdbitpwm.o(i.pwm1_ready_callback) referenced from hummingbirdbitpwm.o(i.LEDS_PWM_init)
 <LI><a href="#[23]">pwm1_ready_callback</a> from hummingbirdbitpwm.o(i.pwm1_ready_callback) referenced from hummingbirdbitpwm.o(i.PWM1_1LED)
 <LI><a href="#[23]">pwm1_ready_callback</a> from hummingbirdbitpwm.o(i.pwm1_ready_callback) referenced from hummingbirdbitpwm.o(i.PWM1_2LEDS)
 <LI><a href="#[24]">pwm2_ready_callback</a> from hummingbirdbitbuzzer.o(i.pwm2_ready_callback) referenced from hummingbirdbitbuzzer.o(i.PWM2_1LED)
 <LI><a href="#[24]">pwm2_ready_callback</a> from hummingbirdbitbuzzer.o(i.pwm2_ready_callback) referenced from hummingbirdbitbuzzer.o(i.buzzer_HB_control)
 <LI><a href="#[28]">pwm_ready_tick</a> from app_pwm.o(i.pwm_ready_tick) referenced from app_pwm.o(i.app_pwm_init)
 <LI><a href="#[2f]">refreshTimerHandler</a> from hummingbirdbituart.o(i.refreshTimerHandler) referenced from hummingbirdbituart.o(i.createRefreshTimer)
 <LI><a href="#[37]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[25]">spi_event_handler</a> from hummingbirdbitspimaster.o(i.spi_event_handler) referenced from hummingbirdbitspimaster.o(i.SPI_init)
 <LI><a href="#[2c]">sys_evt_dispatch</a> from hummingbirdbitblecallbacks.o(i.sys_evt_dispatch) referenced from hummingbirdbitbleinit.o(i.ble_stack_init)
 <LI><a href="#[35]">twi_handler</a> from hummingbirdbitsensors.o(i.twi_handler) referenced from hummingbirdbitsensors.o(i.reset_i2c)
 <LI><a href="#[35]">twi_handler</a> from hummingbirdbitsensors.o(i.twi_handler) referenced from hummingbirdbitsensors.o(i.twi_init)
 <LI><a href="#[26]">uart_event_handle</a> from hummingbirdbituart.o(i.uart_event_handle) referenced from hummingbirdbituart.o(i.UARTInit)
 <LI><a href="#[29]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[2a]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[19c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[19e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[19f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_change_dutycycle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2LEDS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1LED
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_change_dutycycle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_1LED
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_HB_control
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2LEDS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1LED
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_1LED
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_PWM_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[121]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_name_disconnect
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, nrf_drv_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_IRQHandler &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BLEInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hummingbirdbitbleinit.o(i.BLEInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = BLEInit &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LEDS_PWM_init</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, hummingbirdbitpwm.o(i.LEDS_PWM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = LEDS_PWM_init &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hummingbit_pwm_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>LED_HB_control</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hummingbirdbitpwm.o(i.LED_HB_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LED_HB_control &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[56]"></a>LED_micro_control</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hummingbirdbitledarray.o(i.LED_micro_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LED_micro_control &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_off_leds
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_LED_flash_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDArray
</UL>

<P><STRONG><a name="[5a]"></a>MAG_set_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hummingbirdbitmagnetometer.o(i.MAG_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MAG_set_mode &rArr; send_I2C_mag &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[5c]"></a>MAG_set_mode_ls</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hummingbirdbitmagnetometer.o(i.MAG_set_mode_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MAG_set_mode_ls &rArr; send_I2C_mag_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_mag_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[5e]"></a>MMA_set_mode</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, hummingbirdbitaccelerometer.o(i.MMA_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = MMA_set_mode &rArr; send_I2C_acc &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_acc
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[60]"></a>MMA_set_mode_ls</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hummingbirdbitaccelerometer.o(i.MMA_set_mode_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MMA_set_mode_ls &rArr; send_I2C_acc_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_acc_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[7]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>PWM1_1LED</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, hummingbirdbitpwm.o(i.PWM1_1LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = PWM1_1LED &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_one_LED
</UL>

<P><STRONG><a name="[65]"></a>PWM1_2LEDS</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, hummingbirdbitpwm.o(i.PWM1_2LEDS))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_two_LED
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_three_LED
</UL>

<P><STRONG><a name="[66]"></a>PWM2_1LED</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hummingbirdbitbuzzer.o(i.PWM2_1LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = PWM2_1LED &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_three_LED
</UL>

<P><STRONG><a name="[67]"></a>PWM_one_LED</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hummingbirdbitio.o(i.PWM_one_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PWM_one_LED &rArr; PWM1_1LED &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1LED
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
</UL>

<P><STRONG><a name="[68]"></a>PWM_three_LED</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hummingbirdbitio.o(i.PWM_three_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PWM_three_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2LEDS
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_1LED
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_pwm_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
</UL>

<P><STRONG><a name="[69]"></a>PWM_two_LED</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hummingbirdbitio.o(i.PWM_two_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PWM_two_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2LEDS
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
</UL>

<P><STRONG><a name="[17]"></a>RTC1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI0_TWI0_IRQHandler &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI1_TWI1_IRQHandler &rArr; irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hummingbirdbitspimaster.o(i.SPI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPISendData
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER2_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>UARTDisconnection</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hummingbirdbituartcontrol.o(i.UARTDisconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = UARTDisconnection &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAll
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_uart_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[7b]"></a>UARTInit</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, hummingbirdbituart.o(i.UARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UARTInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXRXInit
</UL>

<P><STRONG><a name="[7d]"></a>UARTTXRXInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hummingbirdbituart.o(i.UARTTXRXInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UARTTXRXInit &rArr; UARTInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRefreshTimer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_led_micro
</UL>

<P><STRONG><a name="[1ac]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ad]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ae]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[80]"></a>adv_data_encode</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[46]"></a>advertising_init</STRONG> (Thumb, 88 bytes, Stack size 168 bytes, hummingbirdbitbleinit.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEInit
</UL>

<P><STRONG><a name="[8a]"></a>app_error_fault_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[51]"></a>app_error_handler_bare</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_stop
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_buzzer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_micro_LEDs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_broadcast_uart_timer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_broadcast_timer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_PWM_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_uart_stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_uart_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisconnection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma_ls
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag_ls
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_i2c
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_who_am_i
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_flashing_timer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_acc_ls
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_acc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_offset_ls
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_offset
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_mag_ls
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_mag
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag_ls
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>app_fifo_flush</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_flush))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>

<P><STRONG><a name="[8b]"></a>app_fifo_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[bd]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[8d]"></a>app_fifo_put</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[8f]"></a>app_pwm1_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hummingbirdbitpwm.o(i.app_pwm1_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_pwm1_reset &rArr; app_pwm_uninit &rArr; pwm_dealloc &rArr; nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_PWM
</UL>

<P><STRONG><a name="[92]"></a>app_pwm2_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hummingbirdbitbuzzer.o(i.app_pwm2_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_pwm2_reset &rArr; app_pwm_uninit &rArr; pwm_dealloc &rArr; nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_PWM
</UL>

<P><STRONG><a name="[93]"></a>app_pwm_busy_check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_pwm.o(i.app_pwm_busy_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_pwm_busy_check
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[53]"></a>app_pwm_channel_duty_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_pwm.o(i.app_pwm_channel_duty_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_change_dutycycle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2LEDS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1LED
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_change_dutycycle
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_1LED
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_HB_control
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_PWM_init
</UL>

<P><STRONG><a name="[95]"></a>app_pwm_channel_duty_ticks_set</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_channel_duty_ticks_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_busy_check
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
</UL>

<P><STRONG><a name="[90]"></a>app_pwm_disable</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_pwm_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_disable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan73_workaround
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm1_reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm2_reset
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_buzzer_timer_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
</UL>

<P><STRONG><a name="[52]"></a>app_pwm_enable</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_pwm_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_force
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan73_workaround
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2LEDS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1LED
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_1LED
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_PWM_init
</UL>

<P><STRONG><a name="[50]"></a>app_pwm_init</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, app_pwm.o(i.app_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2LEDS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1LED
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_1LED
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_PWM_init
</UL>

<P><STRONG><a name="[91]"></a>app_pwm_uninit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_pwm.o(i.app_pwm_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_pwm_uninit &rArr; pwm_dealloc &rArr; nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm1_reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm2_reset
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_buzzer_timer_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
</UL>

<P><STRONG><a name="[cf]"></a>app_timer_create</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_buzzer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_micro_LEDs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_broadcast_uart_timer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_broadcast_timer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRefreshTimer
</UL>

<P><STRONG><a name="[b1]"></a>app_timer_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>app_timer_start</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_uart_start
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_flashing_timer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[59]"></a>app_timer_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm2_reset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_flashing_timer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_LEDarray_display
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_stop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_uart_stop
</UL>

<P><STRONG><a name="[b9]"></a>app_uart_flush</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_uart_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[bb]"></a>app_uart_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_uart_get &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[7c]"></a>app_uart_init</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[c0]"></a>app_uart_put</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendUART
</UL>

<P><STRONG><a name="[b4]"></a>app_util_critical_region_enter</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[b6]"></a>app_util_critical_region_exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[c6]"></a>ble_advdata_set</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[89]"></a>ble_advertising_init</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[c7]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[7a]"></a>ble_advertising_start</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisconnection
</UL>

<P><STRONG><a name="[cd]"></a>ble_conn_params_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[d0]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2b]"></a>ble_evt_dispatch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hummingbirdbitblecallbacks.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_evt_dispatch &rArr; ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitbleinit.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[d5]"></a>ble_nus_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_nus_init &rArr; rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[d3]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_nus_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[df]"></a>ble_nus_string_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_timer_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
</UL>

<P><STRONG><a name="[d1]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[43]"></a>ble_stack_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, hummingbirdbitbleinit.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_stack_init &rArr; softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEInit
</UL>

<P><STRONG><a name="[dd]"></a>broadcast_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hummingbirdbitblecontrol.o(i.broadcast_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = broadcast_start &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
</UL>

<P><STRONG><a name="[de]"></a>broadcast_stop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hummingbirdbitblecontrol.o(i.broadcast_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = broadcast_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[30]"></a>broadcast_timer_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hummingbirdbitblecontrol.o(i.broadcast_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = broadcast_timer_handler &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitblecontrol.o(i.init_broadcast_timer)
</UL>
<P><STRONG><a name="[31]"></a>broadcast_timer_uart_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hummingbirdbituartcontrol.o(i.broadcast_timer_uart_handler))
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbituartcontrol.o(i.init_broadcast_uart_timer)
</UL>
<P><STRONG><a name="[e0]"></a>broadcast_uart_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hummingbirdbituartcontrol.o(i.broadcast_uart_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = broadcast_uart_start &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[78]"></a>broadcast_uart_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hummingbirdbituartcontrol.o(i.broadcast_uart_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = broadcast_uart_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisconnection
</UL>

<P><STRONG><a name="[e1]"></a>buzzer_HB_control</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, hummingbirdbitbuzzer.o(i.buzzer_HB_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = buzzer_HB_control &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBuzzer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_bluetooth_disconnection
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_bluetooth_connection
</UL>

<P><STRONG><a name="[e3]"></a>buzzer_bluetooth_connection</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hummingbirdbitsound.o(i.buzzer_bluetooth_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = buzzer_bluetooth_connection &rArr; buzzer_HB_control &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sound
</UL>

<P><STRONG><a name="[e5]"></a>buzzer_bluetooth_disconnection</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hummingbirdbitsound.o(i.buzzer_bluetooth_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = buzzer_bluetooth_disconnection &rArr; buzzer_HB_control &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sound
</UL>

<P><STRONG><a name="[e6]"></a>calibrate_compass</STRONG> (Thumb, 536 bytes, Stack size 96 bytes, hummingbirdbitcalibration.o(i.calibrate_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = calibrate_compass &rArr; check_write_offset &rArr; write_offset_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_offset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_calib_values
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_read_sensor_data_mag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[eb]"></a>change_dutycycle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hummingbirdbitio.o(i.change_dutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = change_dutycycle &rArr; pwm2_change_dutycycle &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_change_dutycycle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm2_change_dutycycle
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
</UL>

<P><STRONG><a name="[ee]"></a>check_UART</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, hummingbirdbituartcontrol.o(i.check_UART))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = check_UART &rArr; UARTDisconnection &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_MB
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_HB
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_packet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_HB_control
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAll
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDArray
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBuzzer
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInitialData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveRemainingBytes
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_uart_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisconnection
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendUART
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>check_accel_mag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.check_accel_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = check_accel_mag &rArr; read_who_am_i &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_who_am_i
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[fb]"></a>check_calibrate</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, hummingbirdbitflash.o(i.check_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_calibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_read
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_update_calibrate
</UL>

<P><STRONG><a name="[fd]"></a>check_flashing</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hummingbirdbitledarray.o(i.check_flashing))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = check_flashing &rArr; stop_LEDarray_display &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_LEDarray_display
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LEDarray_advertising
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>check_read_sensor_data_mag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.check_read_sensor_data_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = check_read_sensor_data_mag &rArr; read_sensor_data_mag_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag_ls
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
</UL>

<P><STRONG><a name="[102]"></a>check_sound</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hummingbirdbitsound.o(i.check_sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = check_sound &rArr; update_name_disconnect &rArr; check_update_name_disconnect &rArr; microbit_pwm_init &rArr; PWM_three_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_name_disconnect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_bluetooth_disconnection
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_bluetooth_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>check_update_name</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hummingbirdbitblecontrol.o(i.check_update_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = check_update_name &rArr; microbit_pwm_init &rArr; PWM_three_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_HB
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_pwm_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hummingbit_pwm_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware_SAMD
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>check_update_name_disconnect</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hummingbirdbitblecontrol.o(i.check_update_name_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = check_update_name_disconnect &rArr; microbit_pwm_init &rArr; PWM_three_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_HB
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_pwm_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hummingbit_pwm_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware_SAMD
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_name_disconnect
</UL>

<P><STRONG><a name="[e7]"></a>check_write_offset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hummingbirdbitmagnetometer.o(i.check_write_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = check_write_offset &rArr; write_offset_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_offset_ls
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_offset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag_ls
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_update_calibrate
</UL>

<P><STRONG><a name="[111]"></a>config_adc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hummingbirdbitio.o(i.config_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = config_adc &rArr; nrf_adc_configure &rArr; nrf_adc_input_select
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_pwm_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
</UL>

<P><STRONG><a name="[2e]"></a>conn_params_error_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hummingbirdbitblecallbacks.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitbleinit.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[47]"></a>conn_params_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hummingbirdbitbleinit.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = conn_params_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEInit
</UL>

<P><STRONG><a name="[189]"></a>convert_ascii</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hummingbirdbitnaming.o(i.convert_ascii))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_devicename_array
</UL>

<P><STRONG><a name="[17d]"></a>convert_axis_mma_ls</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hummingbirdbitaccelerometer.o(i.convert_axis_mma_ls))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mma_packet_ls
</UL>

<P><STRONG><a name="[17b]"></a>convert_axis_scale</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hummingbirdbitmagnetometer.o(i.convert_axis_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = convert_axis_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mag_packet_ls
</UL>

<P><STRONG><a name="[7f]"></a>createRefreshTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hummingbirdbituart.o(i.createRefreshTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = createRefreshTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXRXInit
</UL>

<P><STRONG><a name="[184]"></a>find_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hummingbirdbitmagnetometer.o(i.find_version))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInitialData
</UL>

<P><STRONG><a name="[114]"></a>fs_erase</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, fstorage.o(i.fs_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_erase
</UL>

<P><STRONG><a name="[18b]"></a>fs_init</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, fstorage.o(i.fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_update_calibrate
</UL>

<P><STRONG><a name="[c8]"></a>fs_queued_op_count_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[118]"></a>fs_store</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fstorage.o(i.fs_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_write
</UL>

<P><STRONG><a name="[119]"></a>fs_sys_event_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fstorage.o(i.fs_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_sys_event_handler &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[11e]"></a>fstorage_erase</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hummingbirdbitflash.o(i.fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fstorage_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_calib_values
</UL>

<P><STRONG><a name="[fc]"></a>fstorage_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hummingbirdbitflash.o(i.fstorage_read))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calib_values
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_calibrate
</UL>

<P><STRONG><a name="[11f]"></a>fstorage_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hummingbirdbitflash.o(i.fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fstorage_write &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_calib_values
</UL>

<P><STRONG><a name="[44]"></a>gap_params_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hummingbirdbitbleinit.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_devicename_array
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEInit
</UL>

<P><STRONG><a name="[122]"></a>getInitials_fancyName</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hummingbirdbitnaming.o(i.getInitials_fancyName))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = getInitials_fancyName &rArr; rude_word_check
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rude_word_check
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>get_LEDbitmap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hummingbirdbitledarray.o(i.get_LEDbitmap))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flash_array
</UL>

<P><STRONG><a name="[106]"></a>hummingbit_pwm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hummingbirdbitpwm.o(i.hummingbit_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = hummingbit_pwm_init &rArr; LEDS_PWM_init &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_PWM
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_PWM_init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name_disconnect
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name
</UL>

<P><STRONG><a name="[71]"></a>initSPISendData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hummingbirdbitspimaster.o(i.initSPISendData))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
</UL>

<P><STRONG><a name="[125]"></a>init_LEDs_micro</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, hummingbirdbitledarray.o(i.init_LEDs_micro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_LEDs_micro &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_address
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_micro_LEDs
</UL>

<P><STRONG><a name="[12a]"></a>init_broadcast_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hummingbirdbitblecontrol.o(i.init_broadcast_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_broadcast_timer &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>init_broadcast_uart_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hummingbirdbituartcontrol.o(i.init_broadcast_uart_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_broadcast_uart_timer &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>init_buttons</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.init_buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_buttons
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[129]"></a>init_led_address</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, hummingbirdbitledarray.o(i.init_led_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_led_address
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LEDs_micro
</UL>

<P><STRONG><a name="[12e]"></a>init_micro_LEDs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.init_micro_LEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_micro_LEDs &rArr; init_LEDs_micro &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LEDs_micro
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>init_microbit_sensors</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.init_microbit_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = init_microbit_sensors &rArr; MMA_set_mode &rArr; send_I2C_acc &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA_set_mode_ls
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA_set_mode
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAG_set_mode_ls
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAG_set_mode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mma_mag_ls
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mma_mag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buttons
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accel_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>init_mma_mag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.init_mma_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_mma_mag &rArr; set_interrupt_pins_mma
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mma
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[131]"></a>init_mma_mag_ls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.init_mma_mag_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_mma_mag_ls &rArr; set_interrupt_pins_mma_ls
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mma_ls
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mag_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[137]"></a>init_timer_buzzer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hummingbirdbitbuzzer.o(i.init_timer_buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_timer_buzzer &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = intern_softdevice_events_execute &rArr; nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = main &rArr; BLEInit &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_update_calibrate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LEDarray_advertising
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_buzzer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_micro_LEDs
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_broadcast_uart_timer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_broadcast_timer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitials_fancyName
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sound
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flashing
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXRXInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDS_PWM_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[143]"></a>microbit_io_pwm_main</STRONG> (Thumb, 546 bytes, Stack size 104 bytes, hummingbirdbitio.o(i.microbit_io_pwm_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = microbit_io_pwm_main &rArr; PWM_two_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_PWM
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_default
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_adc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_dutycycle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_two_LED
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_three_LED
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_one_LED
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
</UL>

<P><STRONG><a name="[107]"></a>microbit_pwm_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hummingbirdbitio.o(i.microbit_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = microbit_pwm_init &rArr; PWM_three_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_PWM
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_default
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_adc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_three_LED
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name_disconnect
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name
</UL>

<P><STRONG><a name="[112]"></a>nrf_adc_configure</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_adc.o(i.nrf_adc_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_adc_configure &rArr; nrf_adc_input_select
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_adc
</UL>

<P><STRONG><a name="[147]"></a>nrf_adc_convert_single</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_adc.o(i.nrf_adc_convert_single))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_adc_convert_single &rArr; nrf_adc_input_select
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensors
</UL>

<P><STRONG><a name="[145]"></a>nrf_drv_adc_uninit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.nrf_drv_adc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_adc_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
</UL>

<P><STRONG><a name="[148]"></a>nrf_drv_clock_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>

<P><STRONG><a name="[14b]"></a>nrf_drv_clock_on_sd_enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[138]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[149]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[ac]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[ab]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[9d]"></a>nrf_drv_gpiote_out_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[a0]"></a>nrf_drv_gpiote_out_task_addr_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_gpiote_out_task_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[a5]"></a>nrf_drv_gpiote_out_task_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_disable))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_buzzer_timer_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
</UL>

<P><STRONG><a name="[a8]"></a>nrf_drv_gpiote_out_task_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_enable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[a7]"></a>nrf_drv_gpiote_out_task_force</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_force))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[14f]"></a>nrf_drv_gpiote_out_uninit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[9e]"></a>nrf_drv_ppi_channel_alloc</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_ppi_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[a2]"></a>nrf_drv_ppi_channel_assign</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[9f]"></a>nrf_drv_ppi_channel_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_channel_ppi_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[154]"></a>nrf_drv_ppi_channel_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_enable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[155]"></a>nrf_drv_ppi_channel_free</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_ppi_channel_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[156]"></a>nrf_drv_ppi_channels_include_in_group</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channels_include_in_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_ppi_channels_include_in_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[159]"></a>nrf_drv_ppi_channels_remove_from_group</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channels_remove_from_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[ad]"></a>nrf_drv_ppi_group_alloc</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_ppi_group_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[15a]"></a>nrf_drv_ppi_group_enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_ppi_group_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
</UL>

<P><STRONG><a name="[15b]"></a>nrf_drv_ppi_group_free</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_ppi_group_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[aa]"></a>nrf_drv_ppi_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[70]"></a>nrf_drv_spi_init</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
</UL>

<P><STRONG><a name="[15e]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>

<P><STRONG><a name="[15f]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[96]"></a>nrf_drv_timer_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[161]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[a4]"></a>nrf_drv_timer_compare_int_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ready_tick
</UL>

<P><STRONG><a name="[9b]"></a>nrf_drv_timer_compare_int_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_compare_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[a3]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
</UL>

<P><STRONG><a name="[a9]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[b0]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[af]"></a>nrf_drv_timer_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_timer_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[162]"></a>nrf_drv_timer_uninit</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, nrf_drv_timer.o(i.nrf_drv_timer_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_timer_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[169]"></a>nrf_drv_twi_disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_i2c
</UL>

<P><STRONG><a name="[181]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_i2c
</UL>

<P><STRONG><a name="[163]"></a>nrf_drv_twi_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_i2c
</UL>

<P><STRONG><a name="[165]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma_ls
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag_ls
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_who_am_i
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag_ls
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag
</UL>

<P><STRONG><a name="[167]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma_ls
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag_ls
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_who_am_i
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_acc_ls
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_acc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_offset_ls
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_offset
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_mag_ls
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_I2C_mag
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag_ls
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag
</UL>

<P><STRONG><a name="[168]"></a>nrf_drv_twi_uninit</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, nrf_drv_twi.o(i.nrf_drv_twi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_i2c
</UL>

<P><STRONG><a name="[166]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[be]"></a>nrf_drv_uart_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[bc]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[bf]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[c2]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[c1]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[36]"></a>nus_data_handler</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, hummingbirdbitblecallbacks.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nus_data_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitbleinit.o(i.services_init)
</UL>
<P><STRONG><a name="[27]"></a>on_adv_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hummingbirdbitblecallbacks.o(i.on_adv_evt))
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitbleinit.o(i.advertising_init)
</UL>
<P><STRONG><a name="[d4]"></a>on_ble_evt</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, hummingbirdbitblecallbacks.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = on_ble_evt &rArr; broadcast_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2d]"></a>on_conn_params_evt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hummingbirdbitblecallbacks.o(i.on_conn_params_evt))
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitbleinit.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[144]"></a>pin_default</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hummingbirdbitio.o(i.pin_default))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_pwm_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
</UL>

<P><STRONG><a name="[ed]"></a>pwm1_change_dutycycle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hummingbirdbitpwm.o(i.pwm1_change_dutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = pwm1_change_dutycycle &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_dutycycle
</UL>

<P><STRONG><a name="[23]"></a>pwm1_ready_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hummingbirdbitpwm.o(i.pwm1_ready_callback))
<BR>[Address Reference Count : 3]<UL><LI> hummingbirdbitpwm.o(i.LEDS_PWM_init)
<LI> hummingbirdbitpwm.o(i.PWM1_1LED)
<LI> hummingbirdbitpwm.o(i.PWM1_2LEDS)
</UL>
<P><STRONG><a name="[ec]"></a>pwm2_change_dutycycle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hummingbirdbitbuzzer.o(i.pwm2_change_dutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = pwm2_change_dutycycle &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_dutycycle
</UL>

<P><STRONG><a name="[24]"></a>pwm2_ready_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hummingbirdbitbuzzer.o(i.pwm2_ready_callback))
<BR>[Address Reference Count : 2]<UL><LI> hummingbirdbitbuzzer.o(i.PWM2_1LED)
<LI> hummingbirdbitbuzzer.o(i.buzzer_HB_control)
</UL>
<P><STRONG><a name="[28]"></a>pwm_ready_tick</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_pwm.o(i.pwm_ready_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwm_ready_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_pwm.o(i.app_pwm_init)
</UL>
<P><STRONG><a name="[175]"></a>readFirmwareSAMD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hummingbirdbituartcontrol.o(i.readFirmwareSAMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = readFirmwareSAMD &rArr; transfer_data &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_HB
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInitialData
</UL>

<P><STRONG><a name="[19a]"></a>read_buttons</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, hummingbirdbitsensors.o(i.read_buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_buttons
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_data_packet
</UL>

<P><STRONG><a name="[176]"></a>read_calib_values</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hummingbirdbitflash.o(i.read_calib_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_calib_values
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_read
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_update_calibrate
</UL>

<P><STRONG><a name="[f8]"></a>read_data_packet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.read_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = read_data_packet &rArr; read_sensor_data_mma_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma_ls
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mma
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag_ls
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_data_mag
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[108]"></a>read_firmware_SAMD</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hummingbirdbitblecontrol.o(i.read_firmware_SAMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_firmware_SAMD &rArr; transfer_data &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_HB
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name_disconnect
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name
</UL>

<P><STRONG><a name="[199]"></a>read_mag_packet</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hummingbirdbitmagnetometer.o(i.read_mag_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_mag_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_data_packet
</UL>

<P><STRONG><a name="[17a]"></a>read_mag_packet_ls</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hummingbirdbitmagnetometer.o(i.read_mag_packet_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_mag_packet_ls &rArr; convert_axis_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_axis_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_data_packet
</UL>

<P><STRONG><a name="[198]"></a>read_mma_packet</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hummingbirdbitaccelerometer.o(i.read_mma_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_mma_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_data_packet
</UL>

<P><STRONG><a name="[17c]"></a>read_mma_packet_ls</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, hummingbirdbitaccelerometer.o(i.read_mma_packet_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_mma_packet_ls
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_axis_mma_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_data_packet
</UL>

<P><STRONG><a name="[f0]"></a>read_sensor_HB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hummingbirdbitspimaster.o(i.read_sensor_HB))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware_SAMD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name_disconnect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFirmwareSAMD
</UL>

<P><STRONG><a name="[f1]"></a>read_sensor_MB</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hummingbirdbitspimaster.o(i.read_sensor_MB))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[101]"></a>read_sensor_data_mag</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hummingbirdbitmagnetometer.o(i.read_sensor_data_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_sensor_data_mag &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_packet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_read_sensor_data_mag
</UL>

<P><STRONG><a name="[100]"></a>read_sensor_data_mag_ls</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hummingbirdbitmagnetometer.o(i.read_sensor_data_mag_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_sensor_data_mag_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_packet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_read_sensor_data_mag
</UL>

<P><STRONG><a name="[178]"></a>read_sensor_data_mma</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hummingbirdbitaccelerometer.o(i.read_sensor_data_mma))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_sensor_data_mma &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_packet
</UL>

<P><STRONG><a name="[177]"></a>read_sensor_data_mma_ls</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hummingbirdbitaccelerometer.o(i.read_sensor_data_mma_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_sensor_data_mma_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_packet
</UL>

<P><STRONG><a name="[17e]"></a>read_sensors</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hummingbirdbitio.o(i.read_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_sensors &rArr; nrf_adc_convert_single &rArr; nrf_adc_input_select
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_convert_single
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
</UL>

<P><STRONG><a name="[10e]"></a>read_verify_offset_mag</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hummingbirdbitmagnetometer.o(i.read_verify_offset_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_verify_offset_mag &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_offset
</UL>

<P><STRONG><a name="[10c]"></a>read_verify_offset_mag_ls</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hummingbirdbitmagnetometer.o(i.read_verify_offset_mag_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_verify_offset_mag_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_offset
</UL>

<P><STRONG><a name="[ef]"></a>receiveRemainingBytes</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hummingbirdbituartcontrol.o(i.receiveRemainingBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = receiveRemainingBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[124]"></a>reset_PWM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hummingbirdbitio.o(i.reset_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = reset_PWM &rArr; app_pwm1_reset &rArr; app_pwm_uninit &rArr; pwm_dealloc &rArr; nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm1_reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm2_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_pwm_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hummingbit_pwm_init
</UL>

<P><STRONG><a name="[123]"></a>rude_word_check</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, hummingbirdbitnaming.o(i.rude_word_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rude_word_check
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitials_fancyName
</UL>

<P><STRONG><a name="[f7]"></a>sendInitialData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hummingbirdbituartcontrol.o(i.sendInitialData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sendInitialData &rArr; readFirmwareSAMD &rArr; transfer_data &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_version
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFirmwareSAMD
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendUART
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[f2]"></a>sendUART</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hummingbirdbituart.o(i.sendUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sendUART &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInitialData
</UL>

<P><STRONG><a name="[5f]"></a>send_I2C_acc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hummingbirdbitaccelerometer.o(i.send_I2C_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = send_I2C_acc &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA_set_mode
</UL>

<P><STRONG><a name="[61]"></a>send_I2C_acc_ls</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hummingbirdbitaccelerometer.o(i.send_I2C_acc_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = send_I2C_acc_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA_set_mode_ls
</UL>

<P><STRONG><a name="[5b]"></a>send_I2C_mag</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hummingbirdbitmagnetometer.o(i.send_I2C_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = send_I2C_mag &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAG_set_mode
</UL>

<P><STRONG><a name="[5d]"></a>send_I2C_mag_ls</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hummingbirdbitmagnetometer.o(i.send_I2C_mag_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = send_I2C_mag_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAG_set_mode_ls
</UL>

<P><STRONG><a name="[45]"></a>services_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hummingbirdbitbleinit.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = services_init &rArr; ble_nus_init &rArr; rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEInit
</UL>

<P><STRONG><a name="[f5]"></a>setBuzzer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hummingbirdbituartcontrol.o(i.setBuzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = setBuzzer &rArr; buzzer_HB_control &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[f6]"></a>setLEDArray</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hummingbirdbituartcontrol.o(i.setLEDArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = setLEDArray &rArr; stop_LEDarray_display &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flash_array
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_flashing_timer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_LEDarray_display
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_flashing_string
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
</UL>

<P><STRONG><a name="[142]"></a>set_all_led_micro</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, hummingbirdbitledarray.o(i.set_all_led_micro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_all_led_micro &rArr; switch_off_leds
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_off_leds
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_LED_timer_handler
</UL>

<P><STRONG><a name="[120]"></a>set_devicename_array</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hummingbirdbitnaming.o(i.set_devicename_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_devicename_array
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_name_disconnect
</UL>

<P><STRONG><a name="[134]"></a>set_interrupt_pins_mag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.set_interrupt_pins_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_interrupt_pins_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mma_mag
</UL>

<P><STRONG><a name="[136]"></a>set_interrupt_pins_mag_ls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.set_interrupt_pins_mag_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_interrupt_pins_mag_ls
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mma_mag_ls
</UL>

<P><STRONG><a name="[133]"></a>set_interrupt_pins_mma</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.set_interrupt_pins_mma))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_interrupt_pins_mma
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mma_mag
</UL>

<P><STRONG><a name="[135]"></a>set_interrupt_pins_mma_ls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.set_interrupt_pins_mma_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_interrupt_pins_mma_ls
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mma_mag_ls
</UL>

<P><STRONG><a name="[db]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[da]"></a>softdevice_enable</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[d9]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[37]"></a>softdevice_fault_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_fault_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[d8]"></a>softdevice_handler_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[14a]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[dc]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[25]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hummingbirdbitspimaster.o(i.spi_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitspimaster.o(i.SPI_init)
</UL>
<P><STRONG><a name="[fe]"></a>start_LEDarray_advertising</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.start_LEDarray_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = start_LEDarray_advertising &rArr; stop_flashing_timer &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flash_array
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_flashing_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_flashing_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flashing
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>start_check_update_calibrate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hummingbirdbitflash.o(i.start_check_update_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = start_check_update_calibrate &rArr; check_write_offset &rArr; write_offset_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_offset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calib_values
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>start_flashing_string</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.start_flashing_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = start_flashing_string &rArr; start_flashing_timer &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_flashing_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDArray
</UL>

<P><STRONG><a name="[18a]"></a>start_flashing_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.start_flashing_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = start_flashing_timer &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_flashing_string
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LEDarray_advertising
</UL>

<P><STRONG><a name="[79]"></a>stopAll</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hummingbirdbituartcontrol.o(i.stopAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = stopAll &rArr; buzzer_HB_control &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_LEDarray_display
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisconnection
</UL>

<P><STRONG><a name="[ff]"></a>stop_LEDarray_display</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hummingbirdbitledarray.o(i.stop_LEDarray_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = stop_LEDarray_display &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_off_leds
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_LED_flash_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flashing
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAll
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDArray
</UL>

<P><STRONG><a name="[185]"></a>stop_flashing_timer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.stop_flashing_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stop_flashing_timer &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LEDarray_advertising
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDArray
</UL>

<P><STRONG><a name="[58]"></a>switch_off_leds</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hummingbirdbitledarray.o(i.switch_off_leds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switch_off_leds
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_LEDarray_display
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_led_micro
</UL>

<P><STRONG><a name="[2c]"></a>sys_evt_dispatch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hummingbirdbitblecallbacks.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_evt_dispatch &rArr; fs_sys_event_handler &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitbleinit.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[f4]"></a>transfer_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hummingbirdbitspimaster.o(i.transfer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = transfer_data &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware_SAMD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name_disconnect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFirmwareSAMD
</UL>

<P><STRONG><a name="[35]"></a>twi_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hummingbirdbitsensors.o(i.twi_handler))
<BR>[Address Reference Count : 2]<UL><LI> hummingbirdbitsensors.o(i.reset_i2c)
<LI> hummingbirdbitsensors.o(i.twi_init)
</UL>
<P><STRONG><a name="[130]"></a>twi_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hummingbirdbitsensors.o(i.twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = twi_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_microbit_sensors
</UL>

<P><STRONG><a name="[26]"></a>uart_event_handle</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hummingbirdbituart.o(i.uart_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uart_event_handle &rArr; app_uart_get &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbituart.o(i.UARTInit)
</UL>
<P><STRONG><a name="[141]"></a>uart_spi_bridge</STRONG> (Thumb, 730 bytes, Stack size 32 bytes, hummingbirdbitblecontrol.o(i.uart_spi_bridge))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = uart_spi_bridge &rArr; microbit_io_pwm_main &rArr; PWM_two_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flash_array
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_flashing_timer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_LEDarray_display
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_flashing_string
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensors
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_MB
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_HB
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_packet
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microbit_io_pwm_main
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_version
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_HB_control
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_stop
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>update_flash_array</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hummingbirdbitledarray.o(i.update_flash_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_flash_array
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_LEDbitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_LEDarray_advertising
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLEDArray
</UL>

<P><STRONG><a name="[103]"></a>update_name_disconnect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hummingbirdbitnaming.o(i.update_name_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = update_name_disconnect &rArr; check_update_name_disconnect &rArr; microbit_pwm_init &rArr; PWM_three_LED &rArr; PWM1_2LEDS &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name_disconnect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_devicename_array
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sound
</UL>

<P><STRONG><a name="[179]"></a>verify_data_packet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hummingbirdbitsensors.o(i.verify_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = verify_data_packet &rArr; read_mag_packet_ls &rArr; convert_axis_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mma_packet_ls
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mma_packet
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mag_packet_ls
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mag_packet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_buttons
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_packet
</UL>

<P><STRONG><a name="[ea]"></a>write_calib_values</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hummingbirdbitflash.o(i.write_calib_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_calib_values &rArr; fstorage_write &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_erase
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
</UL>

<P><STRONG><a name="[10d]"></a>write_offset</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hummingbirdbitmagnetometer.o(i.write_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = write_offset &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_offset
</UL>

<P><STRONG><a name="[10a]"></a>write_offset_ls</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hummingbirdbitmagnetometer.o(i.write_offset_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = write_offset_ls &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_offset
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[105]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hummingbirdbitblecontrol.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware_SAMD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name_disconnect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_spi_bridge
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_name
</UL>

<P><STRONG><a name="[34]"></a>micro_buzzer_timer_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hummingbirdbitbuzzer.o(i.micro_buzzer_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = micro_buzzer_timer_handler &rArr; app_pwm_uninit &rArr; pwm_dealloc &rArr; nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitbuzzer.o(i.init_timer_buzzer)
</UL>
<P><STRONG><a name="[e2]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hummingbirdbitbuzzer.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micro_buzzer_timer_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_HB_control
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_buzzer
</UL>

<P><STRONG><a name="[0]"></a>fs_evt_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hummingbirdbitflash.o(i.fs_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitflash.o(fs_data)
</UL>
<P><STRONG><a name="[19b]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hummingbirdbitflash.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_calib_values
</UL>

<P><STRONG><a name="[33]"></a>micro_LED_flash_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.micro_LED_flash_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = micro_LED_flash_handler &rArr; stop_LEDarray_display &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_LEDarray_display
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_micro_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitledarray.o(i.init_micro_LEDs)
</UL>
<P><STRONG><a name="[32]"></a>micro_LED_timer_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hummingbirdbitledarray.o(i.micro_LED_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = micro_LED_timer_handler &rArr; set_all_led_micro &rArr; switch_off_leds
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_led_micro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbitledarray.o(i.init_micro_LEDs)
</UL>
<P><STRONG><a name="[126]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hummingbirdbitledarray.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LEDs_micro
</UL>

<P><STRONG><a name="[128]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hummingbirdbitledarray.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_off_leds
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_led_micro
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LEDs_micro
</UL>

<P><STRONG><a name="[127]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hummingbirdbitledarray.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_off_leds
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_all_led_micro
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LEDs_micro
</UL>

<P><STRONG><a name="[180]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hummingbirdbitsensors.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_who_am_i
</UL>

<P><STRONG><a name="[12d]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hummingbirdbitsensors.o(i.nrf_gpio_cfg_input))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mma_ls
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mma
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mag_ls
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_interrupt_pins_mag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buttons
</UL>

<P><STRONG><a name="[fa]"></a>read_who_am_i</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, hummingbirdbitsensors.o(i.read_who_am_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = read_who_am_i &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_i2c
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accel_mag
</UL>

<P><STRONG><a name="[17f]"></a>reset_i2c</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hummingbirdbitsensors.o(i.reset_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = reset_i2c &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_who_am_i
</UL>

<P><STRONG><a name="[e4]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hummingbirdbitsound.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_bluetooth_disconnection
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_bluetooth_connection
</UL>

<P><STRONG><a name="[7e]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hummingbirdbituart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXRXInit
</UL>

<P><STRONG><a name="[2f]"></a>refreshTimerHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hummingbirdbituart.o(i.refreshTimerHandler))
<BR>[Address Reference Count : 1]<UL><LI> hummingbirdbituart.o(i.createRefreshTimer)
</UL>
<P><STRONG><a name="[f3]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hummingbirdbituartcontrol.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UART
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendInitialData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveRemainingBytes
</UL>

<P><STRONG><a name="[10b]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hummingbirdbitmagnetometer.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_offset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag_ls
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_verify_offset_mag
</UL>

<P><STRONG><a name="[e8]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hummingbirdbitcalibration.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_compass
</UL>

<P><STRONG><a name="[81]"></a>ble_device_addr_encode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[84]"></a>conn_int_encode</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[85]"></a>manuf_specific_data_encode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[87]"></a>name_encode</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[86]"></a>service_data_encode</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[82]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[83]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[197]"></a>uuid_list_sized_encode</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[c9]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[cb]"></a>set_adv_mode_fast</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = set_adv_mode_fast &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[cc]"></a>set_adv_mode_slow</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[188]"></a>whitelist_has_entries</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[d2]"></a>conn_params_negotiation</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[113]"></a>is_conn_params_ok</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[2a]"></a>update_timeout_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[d6]"></a>rx_char_add</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[d7]"></a>tx_char_add</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[63]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>nrf_clock_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>apply_config</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[16b]"></a>nrf_drv_uart_rx_for_uart</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[16f]"></a>nrf_drv_uart_tx_for_uart</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_uart_tx_for_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[171]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[c5]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[c4]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[16d]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[193]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[16e]"></a>rx_byte</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[194]"></a>rx_done_event</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[16c]"></a>rx_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
</UL>

<P><STRONG><a name="[170]"></a>tx_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[195]"></a>tx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[76]"></a>uart_irq_handler</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>nrf_delay_us</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[15d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[15c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[6d]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[160]"></a>spi_xfer</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[6b]"></a>transfer_byte</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.transfer_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[75]"></a>irq_handler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nrf_drv_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>are_app_channels</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.are_app_channels))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
</UL>

<P><STRONG><a name="[152]"></a>is_allocated_channel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.is_allocated_channel))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[158]"></a>is_allocated_group</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.is_allocated_group))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
</UL>

<P><STRONG><a name="[13c]"></a>is_app_channel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>

<P><STRONG><a name="[157]"></a>is_app_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.is_app_group))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
</UL>

<P><STRONG><a name="[153]"></a>is_programmable_app_channel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.is_programmable_app_channel))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
</UL>

<P><STRONG><a name="[6e]"></a>irq_handler_twi</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.irq_handler_twi))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>nrf_delay_us</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[18e]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[191]"></a>nrf_twi_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[164]"></a>twi_clear_bus</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[190]"></a>twi_process_error</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[13a]"></a>twi_rx_start_transfer</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, nrf_drv_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[192]"></a>twi_send_byte</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, nrf_drv_twi.o(i.twi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = twi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[139]"></a>twi_transfer</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[13b]"></a>twi_tx_start_transfer</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, nrf_drv_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[16a]"></a>twi_xfer</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[41]"></a>adc_sample_process</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.adc_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_sample_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>nrf_adc_input_select</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_adc.o(i.nrf_adc_input_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_adc_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_convert_single
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_configure
</UL>

<P><STRONG><a name="[14c]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[14d]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
</UL>

<P><STRONG><a name="[4c]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[151]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
</UL>

<P><STRONG><a name="[4d]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
</UL>

<P><STRONG><a name="[8c]"></a>fifo_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[8e]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[b3]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[10f]"></a>compare_reg_update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18c]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18d]"></a>list_deletions_handler</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = list_deletions_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[13e]"></a>list_insertions_handler</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[110]"></a>nrf_delay_us</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[b2]"></a>rtc1_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[72]"></a>timer_list_handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[13f]"></a>timer_list_insert</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[b8]"></a>timer_stop_op_schedule</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[6a]"></a>timer_timeouts_check</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_timeouts_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>user_op_alloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[29]"></a>uart_event_handler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[115]"></a>check_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fstorage.o(i.check_config))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[11a]"></a>on_operation_success</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fstorage.o(i.on_operation_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_operation_success &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[11c]"></a>queue_advance</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fstorage.o(i.queue_advance))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
</UL>

<P><STRONG><a name="[116]"></a>queue_get_next_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fstorage.o(i.queue_get_next_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_get_next_free
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[11d]"></a>queue_process</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fstorage.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[117]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fstorage.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[11b]"></a>send_event</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fstorage.o(i.send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
</UL>

<P><STRONG><a name="[9c]"></a>app_pwm_channel_init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, app_pwm.o(i.app_pwm_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = app_pwm_channel_init &rArr; nrf_drv_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[94]"></a>nrf_drv_timer_capture_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_drv_timer_capture_get))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_busy_check
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[174]"></a>nrf_drv_timer_capture_task_address_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_drv_timer_capture_task_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[a1]"></a>nrf_drv_timer_compare_event_address_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_drv_timer_compare_event_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[a6]"></a>pan73_workaround</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_pwm.o(i.pan73_workaround))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
</UL>

<P><STRONG><a name="[172]"></a>pwm_channel_ppi_disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_pwm.o(i.pwm_channel_ppi_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwm_channel_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[ae]"></a>pwm_dealloc</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_pwm.o(i.pwm_dealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pwm_dealloc &rArr; nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[173]"></a>pwm_ppi_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_pwm.o(i.pwm_ppi_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[97]"></a>pwm_transition_0or100_to_0or100</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, app_pwm.o(i.pwm_transition_0or100_to_0or100))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pwm_transition_0or100_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_force
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_channel_ppi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[98]"></a>pwm_transition_0or100_to_n</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, app_pwm.o(i.pwm_transition_0or100_to_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pwm_transition_0or100_to_n &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_channel_ppi_disable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_task_address_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[99]"></a>pwm_transition_n_to_0or100</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, app_pwm.o(i.pwm_transition_n_to_0or100))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pwm_transition_n_to_0or100 &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_task_address_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[9a]"></a>pwm_transition_n_to_m</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, app_pwm.o(i.pwm_transition_n_to_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pwm_transition_n_to_m &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_task_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[183]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[182]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[74]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
